name: Build

on:
  push:
    branches: [ master, cpp-gui-dev ]
  pull_request:
    branches: [ master ]

jobs:
  #  build-server-linux:
  #
  #    name: Build server-linux
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #    - name: Checkout the repository
  #      uses: actions/checkout@v2
  #
  #    - name: Build
  #      run: |
  #        make server
  #        mv server server-linux
  #
  #    - name: Binary info
  #      run: |
  #        echo "size: $(stat -c%s server-linux) B  sha256sum: $(sha256sum server-linux)"
  #        echo "Dependencies:"
  #        ldd server-linux | sed -r 's/^\t/  /p' | tee server-linux-deps.txt
  #
  #    - name: Upload binary as artifact
  #      uses: actions/upload-artifact@v2
  #      with:
  #        name: binaries
  #        path: |
  #          server-linux
  #          server-linux-deps.txt
  #        if-no-files-found: error

  #  test-server-linux:
  #
  #    name: Test server-linux
  #    runs-on: ubuntu-latest
  #    needs: build-server-linux
  #
  #    steps:
  #      - name: Download binaries
  #        uses: actions/download-artifact@v2
  #        with:
  #          name: binaries
  #
  #      - name: Spawn binary
  #        run: |
  #          chmod +x server-linux
  #          timeout --preserve-status -sINT 2 ./server-linux

  build-client-linux:

    name: Build client-linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Install portaudio and gtk2.0
      run: |
        sudo apt-get update
        sudo apt-get install libportaudio2 portaudio19-dev gtk2.0 gtk2.0-dev #libwxgtk3.0-gtk3-dev

    - name: Compile wxWidgets
      run: |
        git clone 'https://github.com/wxwidgets/wxwidgets'
        cd wxwidgets
        git checkout 'd1e59441a5d5f2a205cc335f79d24eabdf649c9b'  # just for reproducibility
        git submodule update --init
        mkdir mybuild
        cd mybuild
        ../configure --disable-shared --with-gtk=2
        make -j8
        cd ../..

    - name: Build
      run: |
        make client FLAGS-client="-l:libportaudio.a -l:librt.a -lasound -l:libjack.a `wxwidgets/mybuild/wx-config --libs` `wxwidgets/mybuild/wx-config --cxxflags`"
        mv client client-linux

    - name: Binary info
      run: |
        echo "size: $(stat -c%s client-linux) B  sha256sum: $(sha256sum client-linux)"
        echo "Dependencies:"
        ldd client-linux | sed -r 's/^\t/  /p' | tee client-linux-deps.txt


    - name: Upload binary as artifact
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          client-linux
          client-linux-deps.txt
        if-no-files-found: error

  test-client-linux:

    name: Test client-linux
    runs-on: ubuntu-latest
    needs: build-client-linux

    steps:
    - name: Install xvfb (for running without gui) and gtk2.0
      run: |
        sudo apt-get update
        sudo apt-get install gtk2.0 xvfb

    - name: Download binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries

    - name: Spawn binary
      run: |
        Xvfb :99 &
        chmod +x client-linux
        DISPLAY=:99 timeout --preserve-status -sINT 2 ./client-linux --version || (( $? == 2 ))

  build-client-win:

    name: Build client-win
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Install mingw
      run: |
        sudo apt-get update
        sudo apt-get install gcc-mingw-w64 g++-mingw-w64

#    - name: Install wxWidgets  # not working
#      run: |
#        wget 'https://github.com/GrandOrgue/WxWidgetsCross/releases/download/3.1.5-2.go/wxwidgets3.0-mingw-w64_3.1.5-2.go_all.deb'
#        sha256sum -c <<< "
#          2ee66b6b96cf98b8866bb8ed856bb53c1cc1b84693e7b187184d2e8324bf3284  wxwidgets3.0-mingw-w64_3.1.5-2.go_all.deb"
#        sudo dpkg -i wxwidgets3.0-mingw-w64_3.1.5-2.go_all.deb

    - name: Compile wxWidgets
      run: |
        git clone 'https://github.com/wxwidgets/wxwidgets'
        cd wxwidgets
        git checkout 'd1e59441a5d5f2a205cc335f79d24eabdf649c9b'  # just for reproducibility
        git submodule update --init
        mkdir mybuild
        cd mybuild
        ../configure --host=x86_64-w64-mingw32 --disable-shared --with-msw
        make -j8
        cd ../..


#    - name: Install portaudio  # old version
#      run: |
#        wget 'https://launchpad.net/~tobydox/+archive/ubuntu/mingw-w64/+files/portaudio-mingw-w64_19.600-20161030-4_all.deb' -O /tmp/portaudio-mingw.deb
#        wget 'https://raw.githubusercontent.com/PortAudio/portaudio/pa_stable_v190600_20161030/include/pa_win_wasapi.h' -O /tmp/pa_win_wasapi.h
#        sha256sum -c <<< "
#          0058f55572c2d569e6f84185315a5d5d17799889e9c0eb7dae3475ff21412751  portaudio-mingw.deb
#          f63dad9209f7c9bff965c94164527b9597b1ac49e5958bb2b21f89543c0d9f5b  pa_win_wasapi.h"
#        sudo dpkg -i /tmp/portaudio-mingw.deb
#        sudo cp pa_win_wasapi.h /usr/i686-w64-mingw32/include/
#        sudo cp pa_win_wasapi.h /usr/x86_64-w64-mingw32/include/

    - name: Compile portaudio
      run: |
        git clone 'https://github.com/PortAudio/portaudio'
        cd portaudio
        git checkout 'd98346352a87d45e5916020b77f34754ce6d727a' # just for reproducibility, newer version may also work
        ./configure --host=x86_64-w64-mingw32 --disable-shared --enable-static --with-winapi=wmme,wasapi  # other APIs incl. asio need other libraries
        make -j8
        cd ..

    - name: Build
      run: |
        # make client.exe FLAGS-client-exe="-std=c++17 -static-libstdc++ -static-libgcc -Wl,-Bstatic -lstdc++ -mthreads -lpthread -lportaudio -lole32 -lwinmm -Iwxwidgets/mybuild/lib/wx/include/x86_64-w64-mingw32-msw-unicode-static-3.1 -Iwxwidgets/include -D_FILE_OFFSET_BITS=64 -D__WXMSW__ -Lwxwidgets/mybuild/lib -Wl,--subsystem,windows -mwindows wxwidgets/mybuild/lib/libwx_mswu_xrc-3.1-x86_64-w64-mingw32.a wxwidgets/mybuild/lib/libwx_mswu_qa-3.1-x86_64-w64-mingw32.a wxwidgets/mybuild/lib/libwx_baseu_net-3.1-x86_64-w64-mingw32.a wxwidgets/mybuild/lib/libwx_mswu_html-3.1-x86_64-w64-mingw32.a wxwidgets/mybuild/lib/libwx_mswu_core-3.1-x86_64-w64-mingw32.a wxwidgets/mybuild/lib/libwx_baseu_xml-3.1-x86_64-w64-mingw32.a wxwidgets/mybuild/lib/libwx_baseu-3.1-x86_64-w64-mingw32.a -lwxtiff-3.1-x86_64-w64-mingw32 -lwxjpeg-3.1-x86_64-w64-mingw32 -lwxregexu-3.1-x86_64-w64-mingw32 -lwxscintilla-3.1-x86_64-w64-mingw32 -lexpat -lpng -lssp -lz -lrpcrt4 -loleaut32 -lole32 -luuid -luxtheme -lwinspool -lwinmm -lshell32 -lshlwapi -lcomctl32 -lcomdlg32 -ladvapi32 -lversion -lws2_32 -lgdi32 -loleacc -lwinhttp -Lportaudio -Iportaudio/include"
        make client.exe FLAGS-client-exe="-std=c++17 -static-libstdc++ -static-libgcc -lm -mthreads -Wl,-Bstatic -lpthread -lportaudio -Wl,-Bdynamic -lole32 -lwinmm -Lportaudio/lib/.libs -Iportaudio/include `wxwidgets/mybuild/wx-config --libs` `wxwidgets/mybuild/wx-config --cxxflags`"

        mv client.exe client-win.exe

    - name: Binary info
      run: |
        echo "size: $(stat -c%s client-win.exe) B  sha256sum: $(sha256sum client-win.exe)"
        echo "Dependencies:"
        objdump -p client-win.exe | sed -nr 's/^\tDLL Name: /  /p' | tee client-win-deps.txt

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          client-win.exe
          client-win-deps.txt
        if-no-files-found: error

  test-client-win:

    name: Test client-win
    runs-on: windows-latest
    needs: build-client-win

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      - name: Spawn binary
        shell: bash
        run: |
          timeout --preserve-status -k3 2 ./client-win.exe --version || (( $? == 2 ))

  build-client-mac:

    name: Build client-mac
    runs-on: macos-10.15

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Install portaudio
      run: |
        brew update
        brew install portaudio

    - name: Compile wxWidgets
      run: |
        git clone 'https://github.com/wxwidgets/wxwidgets'
        cd wxwidgets
        git checkout 'd1e59441a5d5f2a205cc335f79d24eabdf649c9b'  # just for reproducibility
        git submodule update --init
        mkdir mybuild
        cd mybuild
        ../configure --disable-shared --with-osx
        make -j8
        cd ../..

    - name: Build
      run: |
        make client FLAGS-client="-std=c++17 -framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework CoreServices -framework CoreFoundation /usr/local/Cellar/portaudio/*/lib/libportaudio.a `wxwidgets/mybuild/wx-config --libs` `wxwidgets/mybuild/wx-config --cxxflags`"
        mv client client-mac

    - name: Binary info
      run: |
        echo "size: $(stat -f%z client-mac) B  sha256sum: $(shasum -a 256 client-mac)"
        echo "Dependencies:"
        otool -L client-mac | sed -n $'s/^\t/  /p' | tee client-mac-deps.txt

#    - name: Install dylibbundler
#      run: brew install dylibbundler

# NOT WORKING
#    - name: Create bundle
#      shell: bash
#      run: |
#        mkdir -p client-mac.app/Contents/MacOS
#        cp client-mac client-mac.app/Contents/MacOS
#        cat > client-mac.app/Contents/Info.plist << EOF
#        <?xml version="1.0" encoding="UTF-8"?>
#        <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
#        <plist version="1.0">
#        <dict>
#          <key>CFBundleName</key>
#          <string>Virtual Choir Rehearsal Room</string>
#          <key>CFBundleIdentifier</key>
#          <string>cz.ondrac.virtual-choir-rehearsal-room</string>
#          <key>CFBundleExecutable</key>
#          <string>client-mac.sh</string>
#          <key>CFBundlePackageType</key>
#          <string>APPL</string>
#        </dict>
#        </plist>
#        EOF
#        cat > client-mac.app/Contents/MacOS/client-mac.sh << 'EOF'
#        #!/bin/sh
#        open -a Terminal "${0%%.sh}"
#        EOF
#        chmod +x client-mac.app/Contents/MacOS/client-mac.sh
#        dylibbundler -od -b -x ./client-mac.app/Contents/MacOS/client-mac -d ./client-mac.app/Contents/libs/ -p @executable_path/../libs/

#    - name: Binary info with bundled dependencies
#      run: |
#        echo "size: $(stat -f%z ./client-mac.app/Contents/MacOS/client-mac) B  sha256sum: $(shasum -a 256 ./client-mac.app/Contents/MacOS/client-mac)"
#        echo "Dependencies:"
#        otool -L ./client-mac.app/Contents/MacOS/client-mac | sed -n $'s/^\t/  /p' | tee client-mac-deps.txt

    - name: Create dmg image
      run: |
        hdiutil create -srcfolder client-mac client-mac.dmg

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: |
          client-mac
          client-mac-deps.txt
          client-mac.dmg
        if-no-files-found: error

  test-client-mac:

    name: Test client-mac
    runs-on: macos-latest
    needs: build-client-mac

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries

      - name: Attach dmg image
        run: hdiutil attach client-mac.dmg

      - name: Spawn binary
        shell: bash
        run: |
          #/Volumes/client-mac/client-mac.app/Contents/MacOS/client-mac </dev/null & sleep 3; kill -INT $! || true; wait $!
          /Volumes/client-mac/client-mac --version </dev/null & sleep 3; kill -INT $! || true; wait $!
          #gtimeout --preserve-status -sINT 2 ./client-mac || (( $? == 2 ))

  check-dependencies:

    name: Check dependencies
    runs-on: ubuntu-latest
    needs:
      #- build-server-linux
      - build-client-linux
      - build-client-win
      - build-client-mac

    steps:
      - name: Download binaries and lists of their dependencies
        uses: actions/download-artifact@v2
        with:
          name: binaries

      - name: Check client-linux dependencies
        shell: bash
        run: |
          diff - <(sed -r 's/^\s*(\S*).*/\1/' < client-linux-deps.txt | sort | uniq) <<EOF
          /lib64/ld-linux-x86-64.so.2
          libasound.so.2
          libc.so.6
          libdl.so.2
          libm.so.6
          libpthread.so.0
          linux-vdso.so.1
          EOF

      - name: Check client-win dependencies
        shell: bash
        run: |
          diff - <(sed -r 's/^\s*(\S*).*/\1/' < client-win-deps.txt | sort | uniq) <<EOF
          KERNEL32.dll
          WINMM.dll
          WS2_32.dll
          msvcrt.dll
          ole32.dll
          EOF

      - name: Check client-mac dependencies
        shell: bash
        run: |
          diff - <(sed -r 's/^\s*(\S*).*/\1/' < client-mac-deps.txt | sort | uniq) <<EOF
          /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox
          /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit
          /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio
          /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
          /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices
          /usr/lib/libSystem.B.dylib
          EOF
          #@executable_path/../libs/libportaudio.2.dylib

      - name: Check server-linux dependencies
        shell: bash
        run: |
          diff - <(sed -r 's/^\s*(\S*).*/\1/' < server-linux-deps.txt | sort | uniq) <<EOF
          /lib64/ld-linux-x86-64.so.2
          libc.so.6
          libm.so.6
          libpthread.so.0
          linux-vdso.so.1
          EOF

